Out-of-Sample Extensions for LLE, Isomap, MDS, Eigenmaps, and Spectral Clustering

Yoshua Bengio, Jean-Franc¸ois Paiement, Pascal Vincent Olivier Delalleau, Nicolas Le Roux and Marie Ouimet Departement d'Informatique et Recherche Operationnelle

´

´ Montreal, Quebec, Canada, H3C 3J7 Universite´ de Montreal ´ ´ ´

{bengioy,vincentp,paiemeje,delallea,lerouxni,ouimema} @iro.umontreal.ca

Abstract Several unsupervised learning algorithms based on an eigendecomposition provide either an embedding or a clustering only for given training points, with no straightforward extension for out-of-sample examples short of recomputing eigenvectors. This paper provides a unified framework for extending Local Linear Embedding (LLE), Isomap, Laplacian Eigenmaps, Multi-Dimensional Scaling (for dimensionality reduction) as well as for Spectral Clustering. This framework is based on seeing these algorithms as learning eigenfunctions of a data-dependent kernel. Numerical experiments show that the generalizations performed have a level of error comparable to the variability of the embedding algorithms due to the choice of training data. 1 Introduction Many unsupervised learning algorithms have been recently proposed, all using an eigendecomposition for obtaining a lower-dimensional embedding of data lying on a non-linear manifold: Local Linear Embedding (LLE) (Roweis and Saul, 2000), Isomap (Tenenbaum, de Silva and Langford, 2000) and Laplacian Eigenmaps (Belkin and Niyogi, 2003). There are also many variants of Spectral Clustering (Weiss, 1999; Ng, Jordan and Weiss, 2002), in which such an embedding is an intermediate step before obtaining a clustering of the data that can capture flat, elongated and even curved clusters. The two tasks (manifold learning and clustering) are linked because the clusters found by spectral clustering can be arbitrary curved manifolds (as long as there is enough data to locally capture their curvature). 2 Common Framework In this paper we consider five types of unsupervised learning algorithms that can be cast in the same framework, based on the computation of an embedding for the training points obtained from the principal eigenvectors of a symmetric matrix. Algorithm 1 "neighborhood" or similarity matrix M. Let us denote KD(·,·) (or K for shorthand) the 1. Start from a data set D = {x1,...,xn} with n points in Rd. Construct a n × n data-dependent function which produces M by Mij = KD(xi,xj). 2. Optionally transform M, yielding a "normalized" matrix M. Equivalently, this corre~ sponds to generating M from a KD by Mij = KD(xi,xj). ~ ~ ~ ~


3. Compute the m largest positive eigenvalues k and eigenvectors vk of M. ~ 4. The embedding of each example xi is the vector yi with yik the i-th element of the k-th principal eigenvector vk of M. Alternatively (MDS and Isomap), the embedding is ei, with ~ of Mij using only m coordinates, in the squared error sense. In the following, we consider the specializations of Algorithm 1 for different unsupervised learning algorithms. Let Si be the i-th row sum of the affinity matrix M: Si = Mij. (1)

eik = kyik

~

. If the first m eigenvalues are positive, then ei · ej is the best approximation

j

We say that two points (a,b) are k-nearest-neighbors of each other if a is among the k nearest neighbors of b in D  {a} or vice-versa. We denote by xij the j-th coordinate of the vector xi. 2.1 Multi-Dimensional Scaling Multi-Dimensional Scaling (MDS) starts from a notion of distance or affinity K that is computed between each pair of training examples. We consider here metric MDS (Cox and Cox, 1994). For the normalization step 2 in Algorithm 1, these distances are converted to equivalent dot products using the "double-centering" formula:

Mij = - 2 ~ 1 1 1 Mij - Si - Sj + n n 1 n2 Sk . (2)

k

The embedding eik of example xi is given by kvki.  2.2 Spectral Clustering Spectral clustering (Weiss, 1999) can yield impressively good results where traditional clustering looking for "round blobs" in the data, such as K-means, would fail miserably. It is based on two main steps: first embedding the data points in a space in which clusters are more "obvious" (using the eigenvectors of a Gram matrix), and then applying a classical clustering algorithm such as K-means, e.g. as in (Ng, Jordan and Weiss, 2002). The affinity matrix M is formed using a kernel such as the Gaussian kernel. Several normalization steps have been proposed. Among the most successful ones, as advocated in (Weiss, 1999; Ng,

Jordan and Weiss, 2002), is the following: Mij = ~ Mij SiSj

. (3)

To obtain m clusters, the first m principal eigenvectors of M are computed and K-means ~ is applied on the unit-norm coordinates, obtained from the embedding yik = vki. 2.3 Laplacian Eigenmaps Laplacian Eigenmaps is a recently proposed dimensionality reduction procedure (Belkin and Niyogi, 2003) that has been proposed for semi-supervised learning. The authors use an approximation of the Laplacian operator such as the Gaussian kernel or the matrix whose element (i,j) is 1 if xi and xj are k-nearest-neighbors and 0 otherwise. Instead of solving an ordinary eigenproblem, the following generalized eigenproblem is solved: (S - M )vj = jSvj (4) with eigenvalues j, eigenvectors vj and S the diagonal matrix with entries given by eq. (1). The smallest eigenvalue is left out and the eigenvectors corresponding to the other small eigenvalues are used for the embedding. This is the same embedding that is computed with the spectral clustering algorithm from (Shi and Malik, 1997). As noted in (Weiss, 1999) (Normalization Lemma 1), an equivalent result (up to a componentwise scaling of the embedding) can be obtained by considering the principal eigenvectors of the normalized matrix defined in eq. (3).


2.4 Isomap Isomap (Tenenbaum, de Silva and Langford, 2000) generalizes MDS to non-linear manifolds. It is based on replacing the Euclidean distance by an approximation of the geodesic distance on the manifold. We define the geodesic distance with respect to a data set D, a distance d(u,v) and a neighborhood k as follows:

D(a, b) = min ~ p d(pi, pi+1) (5)

i

{tion...The-Isomap (pi,pi+1)obtains

where p is a sequence of points of length l  2 with p1 = a, pl = b, pi  D i  2, . , l 1} andalgorithm are k-nearest-neighbors. The length l is free in the minimizais derived by transforming the raw pairwise distances matrix as follows: first compute the matrix Mij = D (xi,xj) of squared geodesic distances with respect to the data D, then ~ 2 apply to this matrix the distance-to-dot-product transformation (eq. (2)), as for MDS. As in

the normalized matrix M from which the embedding ~

MDS, the embedding is eik = 2.5 LLE

kvki

rather than yik = vki.

The Local Linear Embedding (LLE) algorithm (Roweis and Saul, 2000) looks for an embedding that preserves the local geometry in the neighborhood of each data point. First, a sparse matrix of local predictive weights Wij is computed, such that Wij = 1, Wij = 0 M = (I - W ) (I - W ) (6) is formed. The embedding is obtained from the lowest eigenvectors of M, except for the smallest eigenvector which is uninteresting because it is (1,1,... 1), with eigenvalue 0. fit Algorithm 1 (the use of µ > 0 will be discussed in section 4.4). The embedding is given Note that the lowest eigenvectors of M are the largest eigenvectors of M~µ = µI - M to by yik = vki, and is constant with respect to µ. 3 From Eigenvectors to Eigenfunctions To obtain an embedding for a new data point, we propose to use the Nystrom formula (eq. 9) ¨ (Baker, 1977), which has been used successfully to speed-up kernel methods computations by focussing the heavier computations (the eigendecomposition) on a subset of examples. The use of this formula can be justified by considering the convergence of eigenvectors and eigenvalues, as the number of examples increases (Baker, 1977; Williams and Seeger, 2000; Koltchinskii and Gine, 2000; Shawe-Taylor and Williams, 2003). Intuitively, the ´ extensions to obtain the embedding for a new example require specifying a new column of the Gram matrix M, through a training-set dependent kernel function KD, in which one of If we start from a data set D, obtain an embedding for its elements, and add more and more data, the embedding for the points in D converges (for eigenvalues that are unique). (Shawe-Taylor and Williams, 2003) give bounds on the convergence error (in the case of kernel PCA). In the limit, we expect each eigenvector to converge to an eigenfunction for the linear operator defined below, in the sense that the i-th element of the k-th eigenvector converges to the application of the k-th eigenfunction to xi (up to a normalization factor). with a density function p(x). Associate with kernel K a linear operator Kp in Hp: Consider a Hilbert space Hp of functions with inner product f,g (Kpf )(x) = K(x, y)f(y)p(y)dy. (7) We don't know the true density p but we can approximate the above inner product and linear operator (and its eigenfunctions) using the empirical distribution p^. An "empirical" Hilbert space Hp^ is thus defined using p^instead of p. Note that the proposition below can be

j

if xj is not a k-nearest-neighbor of xi and ( j Wijxj -xi)2 is minimized. Then the matrix

~ the arguments may be required to be in the training set. ~

p = f(x)g(x)p(x)dx,


applied even if the kernel is not positive semi-definite, although the embedding algorithms we have studied are restricted to using the principal coordinates associated with positive eigenvalues. For a more rigorous mathematical analysis, see (Bengio et al., 2003). Proposition 1 Let K(a,b) be a kernel function, not necessarily positive semi-definite, that gives rise to ~ a symmetric matrix M with entries Mij = K(xi,xj) upon a dataset D = {x1,... ,xn}. ~ ~ ~ Let (vk,k) be an (eigenvector,eigenvalue) pair that solves Mvk = kvk. Let (fk,k) ~

~ the empirical distribution over D. Let ek(x) = yk(x) associated with a new point x. Then

be an (eigenfunction,eigenvalue) pair that solves (Kp^kk

f )(x) = kfk(x) for any x, with p^

or yk(x) denote the embedding

k fk(x) fk(xi) yk(x) yk(xi) = = = = =

1 k n n k

n

vkiK(x, xi) ~

i=1

nvki f(n) yik,

k x n

= 1 k vkiK(x, xi) ~

i=1

ek(xi) = eik

(8) (9) (10) (11) (12)

See (Bengio et al., 2003) for a proof and further justifications of the above formulae. The spectral clustering, Laplacian eigenmaps and LLE is yk(x). Proposition 2 In addition, if the data-dependent kernel KD is positive semi-definite, then ~

generalized embedding for Isomap and MDS is ek(x) = kyk( x) whereas the one for

fk(x) = n k k(x)

where k(x) is the k-th component of the kernel PCA projection of x obtained from the kernel KD (up to centering). ~ This relation with kernel PCA (Scholkopf, Smola and Muller, 1998), already pointed out ¨ ¨ in (Williams and Seeger, 2000), is further discussed in (Bengio et al., 2003). 4 Extending to new Points Using Proposition 1, one obtains a natural extension of all the unsupervised learning algorithms mapped to Algorithm 1, provided we can write down a kernel function K that gives ~ rise to the matrix M on D, and can be used in eq. (11) to generalize the embedding. We ~ consider each of them in turn below. In addition to the convergence properties discussed in section 3, another justification for using equation (9) is given by the following proposition: Proposition 3 If we define the fk(xi) by eq. (10) and take a new point x, the value of fk(x) that minimizes

2 n m

K(x, xi) - ~ tft(x)ft(xi) (13)

i=1 t=1

is given by eq. (9), for m  1 and any k  m. The proof is a direct consequence of the orthogonality of the eigenvectors vk. This proposition links equations (9) and (10). Indeed, we can obtain eq. (10) when trying to approximate


K at the data points by minimizing the cost ~

n

K(xi, xj) - ~

2 m

tft(xi)ft(xj)

i,j=1 t=1

for m = 1,2,... When we add a new point x, it is thus natural to use the same cost to approximate the K(x,xi), which yields (13). Note that by doing so, we do not seek to ~ approximate K(x,x). Future work should investigate embeddings which minimize the ~ empirical reconstruction error of K but ignore the diagonal contributions. ~ 4.1 Extending MDS For MDS, a normalized kernel can be defined as follows, using a continuous version of the double-centering eq. (2):

K(a, b) = - 2 (d2(a, b) - Ex[d2(x, b)] - Ex [d2(a, x )] + Ex,x [d2(x, x )]) ~ 1 (14)

where d(a,b) is the original distance and the expectations are taken over the empirical data D. An extension of metric MDS to new points has already been proposed in (Gower, 1968), solving exactly for the embedding of x to be consistent with its distances to training points, which in general requires adding a new dimension. 4.2 Extending Spectral Clustering and Laplacian Eigenmaps Both the version of Spectral Clustering and Laplacian Eigenmaps described above are based on an initial kernel K, such as the Gaussian or nearest-neighbor kernel. An equivalent normalized kernel is:

K(a, b) = ~ 1 n K(a, b) Ex[K(a, x)]Ex [K(b, x )]

where the expectations are taken over the empirical data D. 4.3 Extending Isomap To extend Isomap, the test point is not used in computing the geodesic distance between training points, otherwise we would have to recompute all the geodesic distances. A reasonable solution is to use the definition of D(a,b) in eq. (5), which only uses the training ~ points in the intermediate points on the path from a to b. We obtain a normalized kernel by applying the continuous double-centering of eq. (14) with d = D. ~ A formula has already been proposed (de Silva and Tenenbaum, 2003) to approximate Isomap using only a subset of the examples (the "landmark" points) to compute the eigenvectors. Using our notations, this formula is

ek(x) = 21k vki(Ex [D (x , xi)] - D (xi, x)). ~ 2 ~ 2 (15)

i

where Ex is an average over the data set. The formula is applied to obtain an embedding for the non-landmark examples. Corollary 1 The embedding proposed in Proposition 1 for Isomap (ek(x)) is equal to formula 15 (Landmark Isomap) when K(x,y) is defined as in eq. (14) with d = D. ~ ~ Proof: the proof relies on a property of the Gram matrix for Isomap: Mij = 0, by construction. Therefore (1,1,... 1) is an eigenvector with eigenvalue 0, and all the other eigenvectors vk have the property vki = 0 because of the orthogonality with (1, 1, . . . 1). ~ 2 ~ 2 ~ ~ 2 ~ 2

i

i

Writing (Ex [D (x ,xi)]-D~(x,xi)) = 2K(,xx,[xD)+xE,

i

~ 2(

x ,x

yields ek(x) = 2 2k

[D (x , x )]-Ex [D (x, x )]

vkiK(x, xi) + (Ex vki = i

~ 2 x )] - Ex [D (x, x )])

i

ek(x), since the last sum is 0.


4.4 Extending LLE The extension of LLE is the most challenging one because it does not fit as well the framework of Algorithm 1: the M matrix for LLE does not have a clear interpretation in terms of distance or dot product. An extension has been proposed in (Saul and Roweis, 2002), but unfortunately it cannot be cast directly into the framework of Proposition 1. Their

embedding of a new point x is given by yk(x) = n

yk(xi)w(x, xi) (16)

i=1

where w(x,xi) is the weight of xi in the reconstruction of x by its k-nearest-neighbors in the training set (if x = xj  D, w(x,xi) = ij). This is very close to eq. (11), but lacks the normalization by k. However, we can see this embedding as a limit case of Proposition 1, as shown below. We first need to define a kernel Kµ such that ~

Kµ(xi, xj) = Mµ,ij = (µ - 1)ij + Wij + Wji - for xi,xj  D. Let us define a kernel K by ~ K (xi, x) = K (x, xi) = w(x, xi) ~ ~ ~ ~ WkiWkj (17)

k

and K (x,y) = 0 when neither x nor y is in the training set D. Let K

K (xi, xj) = Wij + Wji - ~ WkiWkj

~ ~ be defined by

k

~ a new point x, which yields (µ - 1)K + K

and K (x,y) = 0 when either x or y isn't in D. Then, by construction, the kernel Kµ =

~ ~

~ verifies eq. (17). Thus, we can apply eq. (11) to obtain an embedding of

yµ,k(x) = 1 k yik (µ - 1)K (x, xi) + K (x, xi) ~ ~

i

with k = (µ - k), andµ-^being the k-th lowest eigenvalue ofyikK. This rewrites into Then when µ  , yµ,k(x)  yk(x) defined by eq. (16). Since the choice of µ is free, we can thus consider eq. (16) as approximating the use of the kernel Kµ with a large µ in Proposition 1. This is what we have done in the experiments ~ described in the next section. Note however that we can find smoother kernels Kµ verifying ~ eq. (17), giving other extensions of LLE from Proposition 1. It is out of the scope of this paper to study which kernel is best for generalization, but it seems desirable to use a smooth kernel that would take into account not only the reconstruction of x by its neighbors xi, but also the reconstruction of the xi by their neighbors including the new point x. 5 Experiments We want to evaluate whether the precision of the generalizations suggested in the previous section is comparable to the intrinsic perturbations of the embedding algorithms. The perturbation analysis will be achieved by considering splits of the data in three sets, D = F  R1  R2 and training either with F  R1 or F  R2, comparing the embeddings on F. For each algorithm described in section 2, we apply the following procedure: 1

yikw(x, xi) + (x, xi). ^

i

1 µ - k

i

^ yµ,k(x) =

^k µ - k M ~


4

x 10 4 10 x 10

20 8

6 15

4

10

2

5

0

0

-2

-4 -5

0 x 10 0.05 0.1 0.15 0.2 0.25 0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4

3

7 1

6

0.8

5

0.6 4

3 0.4

2

0.2

1

0 0

-1

-0. 2

-2

-3 -0. 4 0 0.02 0.04 0.06 0.08 0.1 0.12 0.14 0 0.05 0.1 0.15 0.2 0.25

Figure 1: Training set variability minus out-of-sample error, wrt the proportion of training samples substituted. Top left: MDS. Top right: spectral clustering or Laplacian eigenmaps. Bottom left: Isomap. Bottom right: LLE. Error bars are 95% confidence intervals. 1. We choose F  D with m = |F| samples. The remaining n-m samples in D/F are split into two equal size subsets R1 and R2. We train (obtain the eigenvectors) are unstable and can rotate in the subspace they span. Thus we estimate an affine over F  R1 and F  R2. When eigenvalues are close, the estimated eigenvectors alignment between the two embeddings using the points in F, and we calculate the Euclidean distance between the aligned embeddings obtained for each si  F. 2. For each sample si  F, we also train over {F  R1}/{si}. We apply the extension to out-of-sample points to find the predicted embedding of si and calculate the Euclidean distance between this embedding and the one obtained when training with F  R1, i.e. with si in the training set. 3. We calculate the mean difference (and its standard error, shown in the figure) between the distance obtained in step 1 and the one obtained in step 2 for each sample si  F, and we repeat this experiment for various sizes of F. The results obtained for MDS, Isomap, spectral clustering and LLE are shown in figure 1 for different values of m. Experiments are done over a database of 698 synthetic face images described by 4096 components that is available at http://isomap.stanford.edu. Qualitatively similar results have been obtained over other databases such as Ionosphere (http://www.ics.uci.edu/~mlearn/MLSummary.html) and swissroll (http://www.cs.toronto.edu/~roweis/lle/). Each algorithm generates a twodimensional embedding of the images, following the experiments reported for Isomap. The number of neighbors is 10 for Isomap and LLE, and a Gaussian kernel with a standard deviation of 0.01 is used for spectral clustering / Laplacian eigenmaps. 95% confidence


intervals are drawn beside each mean difference of error on the figure. As expected, the mean difference between the two distances is almost monotonically increasing as the fraction of substituted examples grows (x-axis in the figure). In most cases, the out-of-sample error is less than or comparable to the training set embedding stability: it corresponds to substituting a fraction of between 1 and 4% of the training examples. 6 Conclusions In this paper we have presented an extension to five unsupervised learning algorithms based on a spectral embedding of the data: MDS, spectral clustering, Laplacian eigenmaps, Isomap and LLE. This extension allows one to apply a trained model to out-ofsample points without having to recompute eigenvectors. It introduces a notion of function induction and generalization error for these algorithms. The experiments on real highdimensional data show that the average distance between the out-of-sample and in-sample embeddings is comparable or lower than the variation in in-sample embedding due to replacing a few points in the training set. References Baker, C. (1977). The numerical treatment of integral equations. Clarendon Press, Oxford. Belkin, M. and Niyogi, P. (2003). Laplacian eigenmaps for dimensionality reduction and data representation. Neural Computation, 15(6):1373­1396. Bengio, Y., Vincent, P., Paiement, J., Delalleau, O., Ouimet, M., and Le Roux, N. (2003). Spectral clustering and kernel pca are learning eigenfunctions. Technical report, D´epartement d'informatique et recherche op´erationnelle, Universit´e de Montr´eal. Cox, T. and Cox, M. (1994). Multidimensional Scaling. Chapman & Hall, London. de Silva, V. and Tenenbaum, J. (2003). Global versus local methods in nonlinear dimensionality reduction. In Becker, S., Thrun, S., and Obermayer, K., editors, Advances in Neural Information Processing Systems, volume 15, pages 705­712, Cambridge, MA. The MIT Press. Gower, J. (1968). Adding a point to vector diagrams in multivariate analysis. Biometrika, 55(3):582­ 585. Koltchinskii, V. and Gin´e, E. (2000). Random matrix approximation of spectra of integral operators. Bernoulli, 6(1):113­167. Ng, A. Y., Jordan, M. I., and Weiss, Y. (2002). On spectral clustering: Analysis and an algorithm. In Dietterich, T. G., Becker, S., and Ghahramani, Z., editors, Advances in Neural Information Processing Systems 14, Cambridge, MA. MIT Press. Roweis, S. and Saul, L. (2000). Nonlinear dimensionality reduction by locally linear embedding. Science, 290(5500):2323­2326. Saul, L. and Roweis, S. (2002). Think globally, fit locally: unsupervised learning of low dimensional manifolds. Journal of Machine Learning Research, 4:119­155. Sch¨olkopf, B., Smola, A., and M¨uller, K.-R. (1998). Nonlinear component analysis as a kernel eigenvalue problem. Neural Computation, 10:1299­1319. Shawe-Taylor, J. and Williams, C. (2003). The stability of kernel principal components analysis and its relation to the process eigenspectrum. In Becker, S., Thrun, S., and Obermayer, K., editors, Advances in Neural Information Processing Systems, volume 15. The MIT Press. Shi, J. and Malik, J. (1997). Normalized cuts and image segmentation. In Proc. IEEE Conf. Computer Vision and Pattern Recognition, pages 731­737. Tenenbaum, J., de Silva, V., and Langford, J. (2000). A global geometric framework for nonlinear dimensionality reduction. Science, 290(5500):2319­2323. Weiss, Y. (1999). Segmentation using eigenvectors: a unifying view. In Proceedings IEEE International Conference on Computer Vision, pages 975­982. Williams, C. and Seeger, M. (2000). The effect of the input density distribution on kernel-based classifiers. In Proceedings of the Seventeenth International Conference on Machine Learning. Morgan Kaufmann.


