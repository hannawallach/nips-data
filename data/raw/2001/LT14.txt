PAC Generalization Bounds for Co­training
Sanjoy Dasgupta
AT&T Labs--Research
dasgupta@research.att.com
Michael L. Littman
AT&T Labs--Research
mlittman@research.att.com
David McAllester
AT&T Labs--Research
dmac@research.att.com
Abstract
The rule­based bootstrapping introduced by Yarowsky, and its co­
training variant by Blum and Mitchell, have met with considerable em­
pirical success. Earlier work on the theory of co­training has been only
loosely related to empirically useful co­training algorithms. Here we give
a new PAC­style bound on generalization error which justifies both the
use of confidences --- partial rules and partial labeling of the unlabeled
data --- and the use of an agreement­based objective function as sug­
gested by Collins and Singer. Our bounds apply to the multiclass case,
i.e., where instances are to be assigned one of k labels for k  2.
1 Introduction
In this paper, we study bootstrapping algorithms for learning from unlabeled data. The
general idea in bootstrapping is to use some initial labeled data to build a (possibly partial)
predictive labeling procedure; then use the labeling procedure to label more data; then use
the newly labeled data to build a new predictive procedure and so on. This process can
be iterated until a fixed point is reached or some other stopping criterion is met. Here we
give PAC style bounds on generalization error which can be used to formally justify certain
boostrapping algorithms.
One well­known form of bootstrapping is the EM algorithm (Dempster, Laird and Rubin,
1977). This algorithm iteratively updates model parameters by using the current model
to infer (a probability distribution on) labels for the unlabeled data and then adjusting the
model parameters to fit the (distribution on) filled­in labels. When the model defines a joint
probability distribution over observable data and unobservable labels, each iteration of the
EM algorithm can be shown to increase the probability of the observable data given the
model parameters. However, EM is often subject to local minima --- situations in which
the filled­in data and the model parameters fit each other well but the model parameters are
far from their maximum­likelihood values. Furthermore, even if EM does find the globally
optimal maximum likelihood parameters, a model with a large number of parameters will
over­fit the data. No PAC­style guarantee has yet been given for the generalization accuracy
of the maximum likelihood model.
An alternative to EM is rule­based bootstrapping of the form used by Yarowsky (1995),
in which one assigns labels to some fraction of a corpus of unlabeled data and then infers

new labeling rules using these assigned labels as training data. New labels lead to new
rules which in turn lead to new labels, and so on. Unlike EM, rule­based bootstrapping
typically does not attempt to fill in, or assign a distribution over, labels unless there is
compelling evidence for a particular label. One intuitive motivation for this is that by
avoiding training on low­confidence filled­in labels one might avoid the self­justifying local
optima encountered by EM. Here we prove PAC­style generalization guarantees for rule­
based bootstrapping.
Our results are based on an independence assumption introduced by Blum and
Mitchell (1998) which is rather strong but is used by many successful applications. Con­
sider, for example, a stochastic context­free grammar. If we generate a parse tree using
such a grammar then the nonterminal symbol labeling a phrase separates the phrase from
its context --- the phrase and the context are statistically independent given the nontermi­
nal symbol. More intuitively, in natural language the distribution of contexts into which a
given phrase can be inserted is determined to some extent by the ``type'' of the phrase. The
type includes the syntactic category but might also include semantic subclassifications, for
instance, whether a noun phrase refers to a person, organization, or location. If we think of
each particular occurrence of a phrase as a triple hx 1 ; y; x 2 i, where x 1 is the phrase itself,
y is the ``type'' of the phrase, and x 2 is the context, then we expect that x 1 is conditionally
independent of x 2 given y. The conditional independence can be made to hold precisely if
we generate such triples using a stochastic context free grammar where y is the syntactic
category of the phrase.
Blum and Mitchell introduce co­training as a general term for rule­based bootstrapping in
which each rule must be based entirely on x 1 or entirely on x 2 . In other words, there are
two distinct hypothesis classes, H 1 which consists of functions predicting y from x 1 , and
H 2 which consists of functions predicting y from x 2 . A co­training algorithm bootstraps
by alternately selecting h 1 2 H 1 and h 2 2 H 2 . The principal assumption made by Blum
and Mitchell is that x 1 is conditionally independent of x 2 given y. Under such circum­
stances, they show that, given a weak predictor in H 1 , and given an algorithm which can
learn H 2 under random misclassification noise, it is possible to learn a good predictor in
H 2 . This gives some degree of justification for the co­training restriction on rule­based
bootstrapping. However, it does not provide a bound on generalization error as a func­
tion of empirically measurable quantities. Furthermore, there is no apparent relationship
between this PAC­learnability theorem and the iterative co­training algorithm they suggest.
Collins and Singer (1999) suggest a refinement of the co­training algorithm in which one
explicitly optimizes an objective function that measures the degree of agreement between
the predictions based on x 1 and those based on x 2 . They describe methods for ``boosting''
this objective function but do not provide any formal justification for the objective function
itself. Here we give a PAC­style performance guarantee in terms of this agreement rate.
This guarantee formally justifies the Collins and Singer suggestion.
In this paper, we use partial classification rules, which either output a class label or output
a special symbol ? indicating no opinion. The error of a partial rule is the probability that
the rule is incorrect given that it has an opinion. We work in the co­training setting where
we have a pair of partial rules h 1 and h 2 where h 1 (sometimes) predicts y from x 1 and h 2
(sometimes) predicts y from x 2 . Each of the rules h 1 and h 2 can be ``composite rules'', such
as decision lists, where each composite rule contains a large set of smaller rules within it.
We give a bound on the generalization error of each of the rules h 1 and h 2 in terms of the
empirical agreement rate between the two rules. This bound formally justifies both the use

h 1 h 2
X X 2
1
Y
Figure 1: The co­training scenario with rules h 1 and h 2 .
of agreement in the objective function and the use of partial rules. The bound shows the
potential power of unlabeled data --- low generalization error can be achieved for complex
rules with a sufficient quantity of unlabeled data. The use of partial rules is analogous to
the use of confidence ratings --- a partial rule is just a rule with two levels of confidence.
So the bound can also be viewed as justifying the partial labeling aspect of rule­based
bootstrapping, at least in the case of co­training where an independence assumption holds.
The generalization bound leads naturally to algorithms for optimizing the bound. A simple
greedy procedure for doing this is quite similar to the co­training algorithm suggested by
Collins and Singer.
2 The Main Result
We start with some basic definitions and observations. Let S be an i.i.d. sample consisting
of individual samples s 1 , : : :, s m . For any statement [s] we let S() be the subset fs j :
[s j ]g. For any two statements  and 	 we define the empirical estimate b
P( j 	) to be
jS( ^	)j=jS(	)j. For the co­training bounds proved here we assume data is drawn from
some distribution over triples hx 1 ; y; x 2 i with x 1 2 X 1 ; y 2 f1; : : : ; kg, and x 2 2 X 2 , and
where x 1 and x 2 are conditionally independent given y, that is, P (x 1 jy; x 2 ) = P (x 1 jy)
and P (x 2 jy; x 1 ) = P (x 2 jy). In the co­training framework we are given an unlabeled
sample SU of pairs hx 1 ; x 2 i drawn i.i.d. from the underlying distribution, and possibly
some labeled samples SL . We will mainly be interested in making inferences from the
unlabeled data. A partial rule h on a set X is a mapping from X to f1; : : : ; k; ?g. We will
be interested in pairs of partial rules h 1 and h 2 which largely agree on the unlabeled data.
The conditional probability relationships in our scenario are depicted graphically in fig­
ure 1. Important intuition is given by the data­processing inequality of information theory
(Cover and Thomas, 1991): I(h 1 ; y)  I(h 1 ; h 2 ). In other words, any mutual information
between h 1 and h 2 must be mediated through y. In particular, if h 1 and h 2 agree to a large
extent, then they must reveal a lot about y. And yet finding such a pair (h 1 ; h 2 ) requires no
labeled data at all. This simple observation is a major motivation for the proof, but things
are complicated considerably by partial rules and by approximate agreement.
For a given partial rule h 1 with P (h 1 6= ?) > 0 define a function f on f1; : : : ; kg by
f(l) = arg max
1ik
P (h 1 = i j y = l)
We want h 1 to be a nearly deterministic function of the actual label y; in other words, we
want P (h 1 = f(y) j h 1 6= ?) to be near one. We would also like h 1 to carry the same
information as y. This is equivalent to saying that f should be a permutation of the possible
labels f1; : : : ; kg. Here we give a condition using only unlabeled data which guarantees, up
to high confidence, that f is a permutation; this is the best we can hope for using unlabeled

data alone. We also bound the error rates P (h 1 6= i j f(y) = i; h 1 6= ?) using only
unlabeled data. In the case of k = 2, if f is a permutation then f is either the identity
function or the function reversing the two possible values. We use the unlabeled data to
select h 1 and h 2 so that f is a permutation and h 1 has low error rate. We can then use a
smaller amount of labeled data to determine which permutation we have found.
We now introduce a few definitions related to sampling issues. Some measure of the com­
plexity of rules h 1 and h 2 is needed; rather than VC dimension, we adopt a clean notion of
bit length. We assume that rules are specified in some rule language and write jhj for the
number of bits used to specify the rule h. We assume that the rule language is prefix­free
(no proper prefix of the bit string specifying a rule is itself a legal rule specification). A
prefix free code satisfies the Kraft inequality
P
h 2 jhj  1. For given partial rules h 1 and
h 2 and i 2 f1; : : : ; kg we now define the following functions of the sample S. The first, as
we will see, is a bound on the sampling error for empirical probabilities conditioned upon
h 2 = i; h 1 6= ?. The second is a sampling­adjusted disagreement rate between h 1 and h 2 .
 i (h1 ; h2 ; Æ) =
s
(ln 2)(jh1 j + jh2 j) + ln 2k
Æ
2jS(h2 = i; h1 6= ?)j
 i (h1 ; h2 ; Æ) = b
P (h1 = i j h2 = i; h1 6= ?) b
P (h1 6= i j h2 = i; h1 6= ?) 2 i (h1 ; h2 ; Æ)
Note that if the sample size is sufficiently large (relative to jh 1 j and jh 2 j) then  i (h 1 ; h 2 ; Æ)
is near zero. Also note that if h 1 and h 2 have near perfect agreement when they both are
not ? then  i (h 1 ; h 2 ; Æ) is near one. We can now state our main result.
Theorem 1 With probability at least 1 Æ over the choice of the sample S, we have that
for all h 1 and h 2 , if  i (h 1 ; h 2 ; Æ) > 0 for 1  i  k then (a) f is a permutation and (b) for
all 1  i  k,
P (h 1 6= i j f(y) = i; h 1 6= ?) 
b
P (h 1 6= i j h 2 = i; h 1 6= ?) +  i (h 1 ; h 2 ; Æ)
 i (h 1 ; h 2 ; Æ)
:
The theorem states, in essence, that if the sample size is large, and h 1 and h 2 largely agree
on the unlabeled data, then b
P (h 1 6= i j h 2 = i; h 1 6= ?) is a good estimate of the error rate
P (h 1 6= i j f(y) = i; h 1 6= ?).
The theorem also justifies the use of partial rules. Of course it is possible to convert a
partial rule to a total rule by forcing a random choice when the rule would otherwise return
?. Converting a partial rule to a total rule in this way and then applying the above theorem
to the total rule gives a weaker result. An interesting case is when k = 2, h 2 is total and is
a perfect copy of y, and P (h 1 6= ?) happens to be 1=
p
jSj. In this case the empirical error
rate of the corresponding total rule --- the rule that guesses when h 1 has no opinion --- will
be statistically indistinguishable from from 1/2. However, in this case theorem 1 can still
establish that the false positive and false negative rate of the partial rule h 1 is near zero.
3 The Analysis
We start with a general lemma about conditional probability estimation.
Lemma 2 For any i.i.d. sample S, and any statements  and 	 about individual instances
in the sample, the following holds with probability at least 1  over the choice of S.
  P( j 	) b
P( j 	)
   
s
ln 2=
2jS(	)j
(1)

Proof. We have the following where the third step follows by the Chernoff bound.
P
  P( j 	) b
P( j 	)
   >
q ln 2=
2jS(	)j

=
X
k
P (jS(	)j = k)  P
   P( j 	) b
P( j 	)
   >
q ln 2=
2jS(	)j
    jS(	)j = k


X
k
P (jS(	)j = k)   = 
Therefore, with probability at least 1 2 jh1 j 2 jh2 j Æ=k,
j b
P (h 1 = i j h 2 = i; h 1 6= ?) P (h 1 = i j h 2 = i; h 1 6= ?)j   i (h 1 ; h 2 ; Æ) (2)
for any given h 1 ; h 2 . By the union bound and the Kraft inequality, we have that with
probability at least 1 Æ this must hold simultaneously for all h 1 and h 2 , and all 1  i  k.
Lemma 3 Pick any rules h 1 and h 2 for which equation (2) as well as  i (h 1 ; h 2 ; Æ) > 0
hold for all 1  i  k. Then f is a permutation, and moreover, for any i,
P (h 1 = i j f(y) = i; h 1 6= ?) > 1=2:
Proof. Pick any i 2 f1; : : : ; kg. We need to show that there exists some j such that
f(j) = i. By the definition of  i and condition (2) we know
P (h 1 = i j h 2 = i; h 1 6= ?) P (h 1 6= i j h 2 = i; h 1 6= ?)   i (h 1 ; h 2 ; Æ)
Since  i (h 1 ; h 2 ; Æ) > 0, it follows that P (h 1 = i j h 2 = i; h 1 6= ?) > 1=2. Rewriting this
by conditioning on y, we get
X
1jk
P (y = j j h 2 = i; h 1 6= ?)P (h 1 = i j y = j; h 1 6= ?) > 1=2:
The summation is a convex combination; therefore there must exist some j such that
P (h 1 = i j y = j; h 1 6= ?) > 1=2. So for each i there must exist a j with f(j) = i,
whereby f is a permutation.
Lemma 4 Pick any rules h 1 and h 2 satisfying the conditions of the previous lemma. Then
P (f(y) = i j h 2 = i; h 1 6= ?) is at least  i (h 1 ; h 2 ; Æ).
Proof. By the previous lemma f is a permutation, so f(y) has the same information
content as y. Therefore x 1 and x 2 are conditionally independent given f(y). For any i,
 i (h 1 ; h 2 ; Æ)
 P (h 1 = i j h 2 = i; h 1 6= ?) P (h 1 6= i j h 2 = i; h 1 6= ?)
=
X
j
P (f(y) = j j h 2 = i; h 1 6= ?)

P (h 1 = i j f(y) = j; h 1 6= ?)
P (h 1 6= i j f(y) = j; h 1 6= ?)

 P (f(y) = i j h 2 = i; h 1 6= ?)

P (h 1 = i j f(y) = i; h 1 6= ?)
P (h 1 6= i j f(y) = i; h 1 6= ?)

+
X
j 6=i
P (f(y) = j j h 2 = i; h 1 6= ?)

P (h 1 = i j f(y) = j; h 1 6= ?)
P (h 1 = j j f(y) = j; h 1 6= ?)


where the second step involves conditioning on f(y). Also by the previous lemma, we
have P (h 1 = j j f(y) = j; h 1 6= ?) > 1=2 so the second term in the above sum must be
negative, whereby
 i (h 1 ; h 2 ; Æ)  P (f(y) = i j h 2 = i; h 1 6= ?)

P (h 1 = i j f(y) = i; h 1 6= ?)
P (h 1 6= i j f(y) = i; h 1 6= ?)

 P (f(y) = i j h 2 = i; h 1 6= ?)
Under the conditions of these lemmas, we can derive the bounds on error rates:
P (h 1 6= i j f(y) = i; h 1 6= ?)  P (h 1 6= i j h 2 = i; h 1 6= ?)
P (f(y) = i j h 2 = i; h 1 6= ?)

b
P (h 1 6= i j h 2 = i; h 1 6= ?) +  i (h 1 ; h 2 ; Æ)
 i (h 1 ; h 2 ; Æ)
4 Bounding Total Error
Assuming that we make a random guess when h 1 = ?, the total error rate of h 1 can be
written as follows.
error(h 1 ) = P (h 1 6= ?)P (h 1 6= f(y) j h 1 6= ?) +
k 1
k
P (h 1 = ?)
To give a bound on the total error rate we first define b i (h 1 ; h 2 ; Æ) to be the bounds on the
error rate for label i given in theorem 1.
b i (h 1 ; h 2 ; Æ) = 1
 i (h 1 ; h 2 ; Æ)
 b
P (h 1 6= i j h 2 = i; h 1 6= ?) +  i (h 1 ; h 2 ; Æ)

We can now state a bound on the total error rate as a corollary to theorem 1.
Corollary 5 With probability at least 1 Æ over the choice of S we have the follow­
ing for all pairs of rules h 1 and h 2 such that for all i we have  i (h 1 ; h 2 ; Æ=2) > 0 and
b i (h 1 ; h 2 ; Æ=2)  (k 1)=k.
error(h 1 ) 
 b
P (h 1 6= ?) (jh 1 j; Æ=2)

max
j
b j (h 1 ; h 2 ; Æ=2)
+
k 1
k
 b
P (h 1 = ?) + (jh 1 j; Æ=2)

(k; Æ) =
s
k ln 2 + ln 2=Æ
2jSj
Proof. From our main theorem, we know that with probability at least 1 Æ=2, for all
i. P (h 1 6= i j f(y) = i; h 1 6= ?) is bounded by b i (h 1 ; h 2 ; Æ=2). This implies that with
probability at least 1 Æ=2,
error(h 1 )  P (h 1 6= ?)max
j
b j (h 1 ; h 2 ; Æ=2) +
k 1
k
(1 P (h 1 6= ?)) (3)

With probability at least 1 Æ=2 we have that j b
P (h 1 6= ?) P (h 1 6= ?)j is no larger
than (jh 1 j; Æ=2). So by the union bound both of these conditions hold simultaneously with
probability at least 1 Æ. Since max j b j (h 1 ; h 2 ; Æ=2)  (k 1)=k we have that the upper
bound in (3) is maximized by setting P (h 1 6= ?) equal to b
P (h 1 6= ?) (jh 1 j; Æ=2).
Corollary 5 can be improved in a variety of ways. One could use a relative Chernoff
bound to tighten the uncertainty in P (h 1 6= ?) in the case where this probability is small.
One could also use the error rate bounds b i (h 1 ; h 2 ; Æ=2) to construct bounds on P (f(y) =
i j h 1 6= ?). One could then replace the max over b i (h 1 ; h 2 ; Æ=2) by a convex combination.
Another approach is to use the error rate of a rule that combines h 1 and h 2 , e.g., the rule
outputs h 1 if h 1 6= ?, otherwise outputs h 2 if h 2 6= ?, and otherwise guesses a random
value. This combined rule will have a lower error rate and it is possible to give bounds on
the error rate of the combined rule. We will not pursue these refined bounds here. It should
be noted, however, that the algorithm described in section 4 can be used with any bound on
total error rate.
5 A Decision List Algorithm
This section suggests a learning algorithm inspired by both Yarowsky (1995) and Collins
and Singer (1999) but modified to take into account theorem 1 and Corollary 5. Corol­
lary 5, or some more refined bound on total error, provides an objective function that can
be pursued by a learning algorithm --- the objective is to find h 1 and h 2 so as to minimize
the upper bound on the total error rate. Typically, however, the search space is enormous.
Following Yarowsky, we consider the greedy construction of decision list rules.
Let F 1 and F 2 be two ``feature sets'' such that for p 2 F 1 and x 1 2 X 1 we have p(x 1 ) 2
f0; 1g and for q 2 F 2 and x 2 2 X 2 we have q(x 2 ) 2 f0; 1g. We assume that h 1 is to be a
decision list over the features in F 1 , i.e., a finite sequence of the form hp 1 ; v 1 i;: : :;hp k ; v k i
where p i 2 F 1 and v i 2 f1; : : : ; kg. A decision list can be viewed as a right­branching
decision tree. More specifically, if h 1 is the list hp 1 ; v 1 i;hp 2 ; v 2 i;: : :;hp k ; v k i then h 1 (x 1 )
is v 1 if p 1 (x 1 ) = 1 and otherwise equals the value of the list hp 2 ; v 2 i;: : :;hp k ; v k i on x 1 .
We define an empty decision list to have value ?. For  in (0; 1) we can define jh 1 j as
follows where k is the number of feature­value pairs in h 1 .
jh 1 j = log 2
1

+ k log 2
kjF 1 j
1 
It is possible to show that 2 jh1 j equals the probability that a certain stochastic process
generates the rule h 1 . This implies the Kraft inequality
P
h 2 jhj  1 which is all that is
needed in theorem 1 and corollary 5. We also assume that h 2 is a decision list over the
features F 2 and define jh 2 j similarly.
Following Yarowsky we suggest growing the decision lists in a greedy manner adding one
feature value pair at a time. A natural choice of greedy heuristic might be a bound on the
total error rate. However, in many cases the final objective function is not an appropriate
choice for the greedy heuristic in greedy algorithms. A* search, for example, might be
viewed as a greedy heuristic where the heuristic function estimates the number of steps
needed to reach a high­value configuration --- a low value configuration might be one step
away from a high value configuration. The greedy heuristic used in greedy search should
estimate the value of the final configuration. Here we suggest using max j b j (h 1 ; h 2 ; Æ=2)
as a heuristic estimate of the final total error rate --- in the final configuration we should

have that P (h 1 6= ?) is reasonably large and the important term will be max j b j (h 1 ; h 2 ; Æ).
For concreteness, we propose the following algorithm. Many variants of this algorithm also
seem sensible.
1. Initialize h 1 and h 2 to ``seed rule'' decision lists using domain­specific prior
knowledge.
2. Until b
P (h 1 = ?) and b
P (h 2 = ?) are both zero, or all features have been used in
both rules, do the following.
(a) Let g denote h 1 if b
P (h 1 = ?) > b
P (h 2 = ?) and h 2 otherwise.
(b) If  i (h 1 ; h 2 ; Æ=2)  0 for some i, then extend g by the pair hp; vi which
most increases min i  i (h 1 ; h 2 ; Æ=2).
(c) Otherwise extend g by a single feature­value pair selected to minimize the
max j b j (h 1 ; h 2 ; Æ=2).
3. Prune the rules --- iteratively remove the pair from the end of either h 1 or h 2 that
greedily minimizes the bound on total error until no such removal reduces the
bound.
6 Future Directions
We have given some theoretical justification for some aspects of co­training algorithms that
have been shown to work well in practice. The co­training assumption we have used in our
theorems are is at best only approximately true in practice. One direction for future research
is to try to relax this assumption somehow. The co­training assumption states that x 1 and
x 2 are independent given y. This is equivalent to the statement that the mutual information
between x 1 and x 2 given y is zero. We could relax this assumption by allowing some
small amount of mutual information between x 1 and x 2 given y and giving bounds on error
rates that involve this quantity of mutual information. Another direction for future work,
of course, is the empirical evaluation of co­training and bootstrapping methods suggested
by our theory.
Acknowledgments
The authors wish to acknowledge Avrim Blum for useful discussions and give special
thanks to Steve Abney for clarifying insights.
Literature cited
Blum, A. & Mitchell, T. (1998) Combining labeled and unlabeled data with co­training. COLT.
Collins, M. & Singer, Y. (1999) Unsupervised models for named entity classification. EMNLP.
Cover, T. & Thomas, J. (1991) Elements of information theory. Wiley.
Dempster, A., Laird, N. & Rubin, D. (1977) Maximum­likelihood from incomplete data via the EM
algorithm. J. Royal Statist. Soc. Ser. B, 39:1­38.
Nigam, K. & Ghani, R. (2000) Analyzing the effectiveness and applicability of co­training. CIKM.
Yarowsky, D. (1995) Unsupervised word sense disambiguation rivaling supervised methods. ACL.

